.. include:: preamble.rst

.. _section:multi-prod:
	     
Multi Period Models
===================

.. role:: model
   :class: smallcaps
	   
Simple modes, like blending and product mix, form the basis for more
complex model with wider applicability. Often those "static" models
are turned into dynamic ones, by adding a temporal index to the main
variables (how much to buy, to produce, to blend at each time period). Of course a simple
replication of the same model over a time horizon is neither
interesting nor challenging
as, given the same data, its optimal solution will be the same for
every period and there will be no dynamics in the model. What makes
multi-period models interesting, as well as more computationally
challenging as their size grows, is the set of constraints which
link decisions taken in one period with decisions to be taken in
different ones.  In the following some examples will be presented.

:application: :index:`Purchase planning for a canteen`

   A fairly immediate generalization of the diet problem
   concerns purchase planning  for multiple periods. In planning  menus
   for multiple time periods,
   nutritional requirements can be guaranteed
   over a long time periods, like a week,
   through the  standard model. However, decisions made on a certain day might
   influence decisions for other  days. Consider, as an example,
   the total iron present in the diet: instead of imposing
   that at least 100% of the daily requirement is satisfied every
   day, it might be possible to allow each single day to provide less, say
   at least 60% of the daily requirement, with a constraint  imposing to
   reach the correct total requirement,
   equal to 700% of the daily one, in a whole week. That is, letting :math:`t`
   be the index associated to each day, and with :math:`\var{Fe}_t`
   the quantity  of iron in the diet of day :math:`t`,
   the daily constraint would take the form
   
   .. math::
      :nowrap:
      
      \begin{align*}
      \var{Fe}_t & \geq 60 & \forall \, t
      \end{align*}

   while the weekly request could be expressed as
   
   .. math::
      :nowrap:
      
      \begin{align*}
      \sum_{t = 1}^T \var{Fe}_t \geq T \cdot 100
      \end{align*}
      
   (where, in the case of a week, :math:`T = 7`).
   This way  a link is introduced among decisions taken in different
   days.

   Another example of a multi-period model in
   menu planning arises when  quantity discounts are taken into account.
   Without considering now how to model  piecewise linear cost
   functions, consider now the simple situation in which in some days
   prime material costs are lower than
   in others.
   
   In these cases, in order to profit from lower costs in specific
   periods, it becomes necessary to distinguish between what is purchased
   every day and what is actually used for each day's menu.
   When there is a difference between purchase and usage, this difference
   goes into an inventory and becomes available for the following periods.

   In particular, denote by :math:`\var{Buy}_t, \var{Use}_t,
   \var{s}_t`
   respectively the variables that
   indicate, for a given food, the quantity purchased at the end  of
   period :math:`t`, the quantity used for preparing meals
   required in the period and the quantity available in  the inventory
   at the end of the preceding period. The 
   :index:`inventory balance equation` is the following:
   
   .. _inventorybalance:
   
   .. math::
      :nowrap:
        
      \begin{align*}
      \var{Buy}_t + \var{s}_{t-1} = \var{Use}_t + \var{s}_t.
      \end{align*}
  
   This constraint can be seen as a balance between inputs, or
   availability at the beginning of period :math:`t` and outputs from the same periods.
   The following figure gives a
   graphical representation of this temporal link -- later in this volume
   this will be recognized as a :index:`network flow` model:

   .. tikz::
      :align: center

      \begin{tikzpicture}
      \newcommand{\tvar}[1]{{\color{red}{\small{\mathbf{#1}}}}}
      \newcommand{\tparam}[1]{{\color{blue}{#1}}}
      \newcommand{\tset}[1]{\textsc{#1}}
      \node [vertex] (t) at (-1,0) {$ t $};
      \node [vertex] (t1) at (1,0) {$ t + 1 $};
      \path (-2,0) edge [arc, above] node {\small{$ \tvar{Inv}_{t-1} $}} (t);
      \path (t) edge [arc, above] node {$ \tvar{Inv}_{t} $} (t1);
      \path (-1,1) edge [arc, above left] node {$ \tvar{Buy}_{t} $} (t);
      \path (1,1) edge [arc, above left] node {$ \tvar{Buy}_{t + 1} $} (t1);
      \path (t) edge [arc, below left] node {$ \tvar{Use}_{t} $} (-1, -1);
      \path (t1) edge [arc, below left] node {$ \tvar{Use}_{t + 1} $} (1, -1);
      \path (t1) edge [dotted,->,thick] (2,0);
      \end{tikzpicture}
 
   The   :ref:`inventory balance equation<inventorybalance>` creates a link between the
   decisions made in period  :math:`t`  and those that will be made in
   period :math:`t + 1`.
 
   The following model represents a possible schema.
 
   :model: Multiperiod menu planning

|
      :model:`Sets:`
|
      
      :math:`\set{Foods}`:  set of available foods
      :math:`\set{Qual}`:  qualities to be kept under control

|
      :model:`Parameters:`
|

      :math:`\param{T}`: the time horizon;
      
      :math:`\param{Cost}_j^t`: unit cost of food :math:`j \in \set{Food}`
      in period :math:`t`
      
      :math:`\param{Hold}_{jt}`: unit inventory cost, to be paid
      for each unit of food :math:`j` stored at the end of period :math:`t`
      
      :math:`\param{MinQual}_i, \param{MaxQual}_i`: minimum and
      maximum allowed for 
      qualitative element :math:`i \in \set{Qual}` in each period;
      
      :math:`\param{TotMinQual}_i, \param{TotMaxQual}_i`: minimum and
      maximum requests for  element :math:`i` over the entire
      period :math:`1,\ldots, \param{T}`;
      
      :math:`\param{Q}_{ij}`: quantity  of nutrient :math:`i \in \set{Qual}`
      contained in one unit of food :math:`j \in \set{Foods}`;

|
      :model:`Variables:`
|

      :math:`\var{Buy}_{jt}`: quantity of food :math:`j \in \set{Foods}`
      to be purchased at the beginning of period :math:`t`;
      
      :math:`\var{Use}_{jt}`: quantity of of food :math:`j` to be used for
      the meals of period :math:`t`;

      :math:`\var{s}_{jt}` quantity of food :math:`j`  in the inventory
      at the end of period :math:`t`; 

|
      :model:`Constraints:`
|

      Daily diet quality:
       
      .. math::
	 :nowrap:
      
	 \begin{align*}
	 \param{MinQual}_i \leq \sum_{j \in \set{Food}} \param{Q}_{ij} \var{Use}_{jt} & \leq
	 \param{MaxQual}_i & \forall \, i & \in \set{Qual}, \forall\,t
	 \end{align*}

      Diet quality in the planning period:

      .. math::
	 :nowrap:
	    
	 \begin{align*}
         \param{TotMinQual}_i \leq \sum_{j \in \set{Food}} \param{Q}_{ij}
         \sum_{t=1}^T \var{Use}_{jt} & \leq \param{TotMaxQual}_i
         & \forall \, i & \in \set{Qual}
	 \end{align*}
	 
    Inventory balance:
    
    .. math::
       :nowrap:

       \begin{align*}
       \var{Buy}_{jt} + \var{s}_{jt-1} & =
       \var{Use}_{jt} + \var{s}_{jt} & \forall \, j & \in \set{Food},
       t \in 1,\ldots,T
       \end{align*}
       
    Non negativity:

    .. math::
       :nowrap:
	  
       \[
       \var{Use}_{jt}, \var{Buy}_{jt}, \var{s}_{jt} \geq 0
       \]

    Observe, in particular, the  non-negativity constraint of the
    inventory: from the inventory balance equation it immediately
    follows  that

    .. math::
       :nowrap:
	  
       \[
       \var{Buy}_{jt} + \var{s}_{jt}  \geq \var{Use}_{jt}  
       \]
       
    thus everything needed for day :math:`t`  is always already available at
    the beginning of the period, either form newly bought food or from
    the inventory. Thus, non negativity of the inventory is the key to
    guarantee that enough supply needs to be available to satisfy all
    of the demand.
      
|
    :model:`Objective:` Maximize the total gain:
|

    A possible objective function might be:

    .. math::
       :nowrap:

       \[
       \min \sum_{j \in \set{Foods}}\sum_{t=1}^T  \left( \param{Cost}_j^t
       \var{Buy}_{jt} +
       \param{InvCost}_{jt}
       \var{s}_{jt} \right)
       \]

:application: :index:`Aggregate production planning`

Assume that a  company needs to plan
production and workforce levels for a given time period,
based on demand forecast. We assume that either a single product
is planned, or in any case requirements are expressed, e.g., in
FTE (Full Time Equivalent) units of measurement.

As in standard product mix problems, the quantity
of resources needed is assumed to be given;
assume also there is the possibility of hiring
staff or to have a limited amount of  overtime in each period
planning horizon. We wish to formulate a model for
production planning,  labor requirements,
hiring, in order to minimize the total cost. 
 
This is an example of multi-period planning:  decisions made
today regarding production and staff levels will possibly affect  decisions 
to be taken in subsequent periods. We recall here the basic
inventory balance equation:

.. math::
   :nowrap:

   \[
   \var{s}_{t-1} + \var{In}_t = \var{Out}_t + \var{s}_{t}
   \]

While the above equation is associated to inventory (finished goods,
prime material, ...) it can be seen that a similar equation will be
needed for staff level:
in this case :math:`\var{In}` and :math:`\var{Out}` represent the quantity of
staff hired or laid off during a period, while :math:`\var{s}` denotes the
staff level.

:model:`Aggregate production planning for a single product`

|
   :model:`Sets:`
|
   
   * :math:`\set{ProdType}`: production modes: regular,
     overtime, external

|
   :model:`Parameters:`
|

   * :math:`\param{T}`: the planning horizon;

   * :math:`\param{ProductCost}_p`: total cost, inclusive of labor and
     cost of raw materials, required to produce one unit 
     using production  mode  :math:`p \in \set{ProdType}`;

   * :math:`\param{RegularCost}`:  cost for one hour of  regular work
     Regular wages are paid, independently
     on the quantity produced. It is thus possible that
     part of the production capacity is not used;

   * :math:`\param{MaxProd}_p`: maximum  production in
     a single period using production mode  :math:`p \in \set{ProdType}`;

   * :math:`\param{InitialInv}`: initial level of the inventory;

   * :math:`\param{FinalInv}`: required  level of the inventory at
     the end of the planning period;
     
   * :math:`\param{InvCost}`:  inventory cost (for one unit, for
     one time period);
     
   * :math:`\param{Cap}`: maximum  inventory capacity;
     
   * :math:`\param{Demand}_t`:  (known) demand for the product in period
     :math:`t \in 1,T`
	   
   * :math:`\param{InitialStaff}`: initial staff level

   * :math:`\param{FinalStaff}`: required final staff level

   * :math:`\param{MaxRegProd}`: maximum production in a single period by
     a regular work unit

   * :math:`\param{HireCost}`:  cost for hiring one unit
     
   * :math:`\param{LayoffCost}`: cost for laying off one unit of workforce

|
   :model:`Variables:`
|

   * :math:`\var{Prod}_{t, p}`:  quantity to be produced in period
     :math:`t` with production type  :math:`p\in \set{ProdType}`

   * :math:`\var{s}_t`: inventory level at the end of
     period :math:`t`
     
   * :math:`\var{Hire}_t`: number of worker units hired at the beginning
     of period t
       
   * :math:`\var{Layoff}_t`: number of
     workers laid off at the beginning of  period :math:`t`
     
   * :math:`\var{Work}_t`: number of workers available in  period
     :math:`t`
     
|
   :model:`Constraints:`
|

   *  Non-negativity for all variables (and, usually, integrality);
      
   *  Inventory capacity:
      :math:`0 \leq \var{s}_t \leq \param{Cap}`
      
   *  Inventory balance:

      .. math::
	 :nowrap:
	    
	 \[
	 \sum_{p \in \set{ProdType}} \var{Prod}_{t, p} +
         \var{s}_{t-1}
         = \var{s}_t + \param{Demamnd}_p
	 \]
      
      When :math:`t=1`, in the equation :math:`\var{s}_{t-1}`
      needs to be replaced by :math:`\param{InitialInv}`

   *  Final inventory

      .. math::
	 :nowrap:
	    
	 \[
         \var{s}_{T} = \param{FinalInv}
	 \]
	 
    *  Workforce balance:

       .. math::
	  :nowrap:
	     
	  \[
          \var{Work}_t = 
          \var{Work}_{t-1} + \var{Hire}_t -  \var{Layoff}_t
	  \]
	  
       where, as in the inventory balance, in the first period
       :math:`\var{work}_0` should be
       substituted by  :math:`\param{InitialStaff}`
	     
    *  Final workforce level

       .. math::
	  :nowrap:
	     
	  \[
	  \var{Work}_{T} = \param{FinaStaff}
	  \]
    
    *   production limit:

	.. math::
	   :nowrap:
	      
	   \[
	   \var{Prod}_{t, p} \leq \param{MaxProd}_p
	   \]
	   
	for every :math:`p \in \set{ProdType}`  except regular production
	type, for which a separate constraint is given, and each
	period :math:`t`
	
   *  Maximum production limit on regular hours:

      .. math::
	 :nowrap:
	    
	 \[
         \var{Prod}_{t, Regular} \leq \var{Work}_t \param{MaxProd}_{Regular}
	 \]
	 
      for :math:`t =1,T`.


|
   :model:`Objective:` Maximize the total gain:
|

   The objective function is composed of the cost for overtime and for
   external production, the inventory cost and the cost for hiring and
   laying off; the cost for regular production depends on the staff
   level.

   .. math::
      :nowrap:
	 
      \begin{align*}
      \min & \sum_{t \in 1,T} ( \sum_{p \in \{Overtime, External \}} \param{ProdCost}_p
      \var{Prod}_{t, p} \\
      & + \param{RegularCost} \var{Work}_t * \param{MaxRegProd} \\
      & + \param{InvCost} \var{s}_t \\
      & + \param{HireCOst} \var{Hire}_t + \param{LayoffCost} \var{Layoff}_t
      )
      \end{align*}
      
As an example, consider  the data contained in the following file:

.. tabs::
   
   .. group-tab:: AMPL
      .. code-block:: ampl
      .. literalinclude:: AMPL/AggrProd.dat
	 :caption: AggrProd.dat
      
   .. group-tab:: Julia
      .. code-block:: Julia
      .. literalinclude:: Julia/AggrProd.dat
	 :caption: AggrProd.dat

 
It may be interesting to compare the optimal plan obtained through
our proposed model, with greedy (or myopic) plans computed through
two classical  aggregate production planning strategies, the
:index:`level`  and the :index:`chase` strategies. In a *level* strategy
the workforce level is kept constant during the whole period, with,
possibly, a single level change at the initial period.
The optimal level can be quite easily found with simple enough ad-hoc
strategies;
in order to compare with the optimal one, we may choose to 
obtain a level strategy  adding the constraint

.. math:
   :nowrap:
      
   \[
   \var{Staff}_{t} = \var{Staff}_{t-1} \quad t \in 1,\ldots,T
   \]

An alternative level strategy might also be considered in which the
total production is constant.

In a  chase strategy instead the production in each  period exactly  matches the demand. In
in this case the inventory, with the only possible exceptions in the
first and last periods,  will always be empty. This
strategy can be extremely easily solved -
the use of a model is superfluous in this case. However, in order to
automate the procedure, in the following models we include two
constraints which, if activated, lead to level or chase strategies.


.. tabs::
   
   .. group-tab:: AMPL
      .. code-block:: ampl
      .. literalinclude:: AMPL/AggrProd.mod
	 :caption: AggrProd.mod
      
   .. group-tab:: Julia
      .. code-block:: Julia
      .. literalinclude:: Julia/TBD.jl
	 :caption: AggrProd.jl

When solving the example with the three strategies, (the optimal, best
level and chase ones) we obtain the following result:
 
.. tabs::
   
   .. group-tab:: AMPL
      .. code-block:: ampl
      .. literalinclude:: AMPL/AggrProd.out
	 :caption: AggrProd.out
      
   .. group-tab:: Julia
      .. code-block:: Julia
      .. literalinclude:: Julia/TBD.jl
	 :caption: AggrProd.out
 
As expected, both the level and the  chase strategy produce a  plan
whose cost is significantly higher than the one obtained through the
optimal plan. As a side notice, please observe that this is not a
linear optimization problem, but a mixed integer linear optimization
one, as some variables, like the staff level, are constrained to
assume integer values only. By the way, imposing the integrality of
the number of hired or laid off personnel units and requiring that the
initial staff level is integer, we obtain the integrality of the staff
level even without imposing it.

Although integrality is usually a very
expensive constraint, i.e. a constraint which quite often makes a
model extremely difficult or even impossible to solve in reasonable
time, in this case the solution was found extremely quickly. It can be
observed also that, although the computational effect of imposing
integrality is in general  very strong, from a purely syntactic point
of view asking a variable to assume only integer values is very easy
in modern modeling languages.


Another, quite similar, application  is based on
cash flow management.

  :application: :index:`Multiperiod financial planning`
	         

  In this application we will consider an elementary, deterministic,
  portfolio management problem. 
  Consider the situation in which an investor has a known plan of
  revenues (e.g., wages) and expenses  for a given time horizon.
  Assume also that the investor might choose to buy some debt
  securities, like 
  treasury bonds; these are financial instruments which guarantee a
  fixed, pre-determined, interest rate either periodically or in a
  unique solution  when they get reimbursed.

  The following data file includes an elementary example.

  .. tabs::
   
     .. group-tab:: AMPL
	.. code-block:: ampl
	.. literalinclude:: AMPL/invest.dat
	   :caption: invest.dat
      
     .. group-tab:: Julia
	.. code-block:: Julia
	.. literalinclude:: Julia/invest.dat
	   :caption: invest.dat
 
  In the file we included  a fixed salary, a periodic expense (e.g., a
  home loan), a minimum required level of the cash at the end of every
  month.
  In the example data  there are 4 investment options, in fixed income
  instruments with 1, 3, 6, 12 months life. 
  A title with a life
  of :math:`d` months with nominal yearly rate
  :math:`r` will produce an interest which will be paid, together with the
  invested capital, :math:`d` months after the purchase.
  The interest to be paid is computed as follows: a monthly bond
  with a nominal interest :math:`r` will  produce :math:`r/12` as
  the interest after one month, while a three-months bond  will
  produce :math:`r \times 3/ 12 = r/4` as the
  interest after three moths from the investment.
  In general, an investment of :math:`Q` euro in a bond
  with life :math:`d` months and  nominal yearly interest rate
  :math:`r`  will produce, after :math:`d` months, an
  interest equal to :math:`Q \cdot \frac{d}{12} \cdot \frac{r}{100}`. 
 
  Now the problem can be formally posed as that of
  determine the amount of each bond to be purchased in each
  month to satisfy the constraints on minimum cash, which, if non negative,
  also guarantees enough liquidity to be available for all the required
  expenses.

  As an example of a possible objective function, here we assume we wish
  to maximize the total amount of interest received. Take into account
  the fact that this has the negative effect of concentrating much of
  the investments in order to produce a large final cash at the end of
  the optimization period, which is not usually a desirable
  situation. However, this is due to the fact that in planning with a
  finite horizon we are assuming that at the end of the period
  everything should be available as cash. This border effect might be
  mitigated in many different ways, choosing a more suitable objective
  function. A possibility might be that of considering a rolling-horizon
  approach, in which a long term plan, say 5 years, is prepared and a
  much shorter plan is actually implemented. As an example, we might
  wish to follow the plan for one year, after which we re-run the model
  for the following 5 years and so on. Another possibility is to apply
  a *discount factor* to future cash flow, based e.g. on the inflation
  rate, so that the same amount of money has different value depending
  on how far in the future it will be available.

  The following model implements a basic investment exercise.

  .. tabs::
   
     .. group-tab:: AMPL
	.. code-block:: ampl
	.. literalinclude:: AMPL/invest.mod
	   :caption: invest.mod
      
     .. group-tab:: Julia
	.. code-block:: Julia
	.. literalinclude:: Julia/invest.jl
	   :caption: invest.jl
 
  The solution of this model can be presented by listing,
  month by month, the situation of purchases, of the cashier, of the
  interest paid:

  .. code-block:: ampl
  .. literalinclude:: AMPL/invest.out
			 
  It can be observed, from the example above, that the final cash is
  almost always exactly equal to the required minimum, as all excess
  liquidity is immediately invested. The only exception is the cash at
  the end of period 24. It is also possible to see how different
  investment options are used, taking into account forecasted
  expenses. 

  This simple example produces a feasible financial plan with a total
  amount of paid interests equal to 381.79. It might be notices that, however,
  this strategy might not be feasible, as it is not possible to buy
  fractions of a bond. Even more, usually  bonds can be acquired
  only in integer multiples of, say, 1000 euro. This additional
  constraint is easily imposed, but the underlying model is no more a
  pure linear optimization one as it requires integer variables which, in
  general, make the solution much harder to find and to certify. Running
  the integer variant of this model in which we assume that bonds can
  be bought in multiples of 1000 euro, after a few minutes of computation
  we stopped the algorithm and obtained the following solution. 

  .. code-block:: ampl
  .. literalinclude:: AMPL/invest_int.out
			 
  This solution is more acceptable then the previous one and grants
  a total interest of 370.375 euro, thus showing that constraints
  (like the integrality requirement)  come with a cost (which in this
  case is roughly 0.03% of the previous one). This is not a
  certifiably optimal solution as the solver was artificially stopped
  before convergence. The solver however was able to certify that no
  solution with value better than 371.01204 might exist for this example. 

  From the point of view
  modeling, the most important aspect of this application is the
  formulation of the cash balance equation:

  .. math::
     :nowrap:
	
     \begin{align*}
     \var{Cash}_t & = \var{Cash}_{t-1} + \param{revenues}_t
     + \var{Reimburse}_t  \\
     & - \param{expenses}_t- \sum_{inv} \var{Buy}_{inv,t}
     \end{align*}

  The model for each single period consists of the definition
  of reimbursement:

  .. math::
     :nowrap:
	
     \begin{align*}
     \var{Reimburse}_t & = \sum_{inv \in \set{INVEST} : t > \param{Duration}(inv)} 
     \var{Buy}_{inv, t- \param{Duration}(inv)} (1. + \param{InterestRate}_{inv})
     \end{align*}
 
  The balance equation link
  variables related to the current period with variables related to 
  previous periods through the return of the investments. The equation
  for reimbursement (actually not strictly needed, but useful for the sake of clarity) states
  that at time :math:`t` we will obtain back what invested  :math:`\param{Duration}`
  periods before plus the interest associated to that investment.
  The objective function we used here is equal to the formula of
  reimbursement, except that we do not account for the capital
  reimbursement, but just for the interest gained. In practice, the
  "1. +" term above is omitted.  

  In more elaborate cash flow models, even without going to stochastic
  models, several variants and extensions are possible. Sometimes, when
  buying, some extra
  expenses and fees are to be paid, some of which are proportional to
  the purchased amount, while others  are fixed charges.
  A bank might require, as an example, 0.1% of the investment plus a
  fixed charge of 5€ per operation. While the first fee is easy to
  account for, the second one, of a discrete nature, requires the
  introduction of binary variables: fixed charge models will be analyzed
  and modeled in the  section devoted to the :ref:`Fixed Charge problem<sect:fixedcharge>`.  

  Sometimes also cash grants a tiny interest, which can be easily taken into
  account; sometimes, however, when the cash is allowed to go negative,
  a different, much higher in absolute value, "negative" interest rate
  is paid. This piecewise linear cost function associated to cash
  can be quite easily modeled in this case - how to do this will be
  explained in the section on :ref:`Minimax models<sect:minmax>`.
  The minimum level of cash
  might be easily imposed, even if negative. However, sometimes, banks
  apply an even more subtle, and difficult to model, penalty: a fixed
  interest rate is applied to the minimum value of the cash during a
  period (e.g., one year), if that minimum is negative. So, for example,
  if the cash has always been positive except during, say, two periods, when it
  was -5€ and -100€,  not only a negative interest will be
  paid for the -5 and the -100 cash values, but also a different
  penalty will be applied to the -100 value only, disregarding how
  long was the cash at that level. Modeling this is more challenging and
  will not be dealt with here.


The structure of many  multi-period problems is that of
a set of models, even quite complex ones, related to a single period, linked
through  a few variables and constraints which span different time
periods and connect decisions taken in different time instants. An
example was the cash flow application above,  where the  cash balance
equations link each period with the immediately preceding one, exactly
as the inventory balance in previous models. In the cash flow example
the link is to more than one period, thanks to the reimbursement of bonds. 
Quite often the link between different periods is "weak",
involving  only a few variables over 
contiguous time periods, or a tiny number of constraints. If we explicitly represented
the coefficient matrix of the variables, a rather sparse matrix would be obtained
(that is, with a low percentage of non-null elements); typically this
coefficient matrix will be almost block diagonal. Each block
would correspond to  equations and variables related to a
single period model, with just a few lines whose coefficients belong
to different blocks. Graphically this situation might be similar to
that shown in the following figures.

.. tikz::

   \begin{tikzpicture}[scale=0.6]
   \draw[thin] (0,0.1) rectangle (9,6);
   \filldraw[fill=lightgray,draw=black] (0,6) rectangle (3,4.1);
   \filldraw[fill=gray,draw=black] (2.8,4.1) rectangle (3.2, 4);
   \filldraw[fill=lightgray,draw=black] (3,4) rectangle (6,2.1);
   \filldraw[fill=gray,draw=black] (5.8,2.1) rectangle (6.2, 2);
   \filldraw[fill=lightgray,draw=black] (6,2) rectangle (9,0.1);
   \end{tikzpicture}\quad

.. tikz::
   
   \begin{tikzpicture}[scale=0.6]
   \draw[thin] (0,0.1) rectangle (9,6);
   \filldraw[fill=lightgray,draw=black] (0,6) rectangle (3,4.05);
   \filldraw[fill=lightgray,draw=black] (3,4.05) rectangle (6,2.1);
   \filldraw[fill=lightgray,draw=black] (6,2.1) rectangle (9,0.1);
   \filldraw[fill=gray,draw=black] (0,.1) rectangle (9, 0.2);
   \end{tikzpicture}

Models of this kind frequently  reach huge dimensions; cosnider, as an
example, a multi-period version of the Aluminum blending
problem. Assume each day we can chose among, say, among 50 scrap types and
that we wish to take under control 15 chemical elements. If we plan
for one year, the variables of the problem become :math:`365 \times 50 =
18\,250` and the constraints at least 5475, plus the inventory
balance equations. This is not considered a large scale
linear optimization problem, but it is easy to imagine how more
complex probem may grow in dimension when cast into a multi-period scenario.

Even when the size of these problems gets huge, however, it is possible to build algorithms which take advantage of
the particular structure of the constraint matrix, in particular its
sparsity and its block structure.
Just to name one of the most well known methods, Bender's
decomposition method  :cite:`Benders62` is particularly well suited
for 
these cases; details on these kinds of methods are out of scope in
this volume; we just recall that they consist of cycles of "external" iterations, during which
tentative values are assigned to the variables which link different blocks, followed by "internal" iterations,
during which the individual subproblems associated to each block are solved
separately, possibly exploiting parallel computing.

.. include:: closing.rst

